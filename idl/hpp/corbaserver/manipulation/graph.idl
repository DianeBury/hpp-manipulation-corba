// Copyright (c) 2014, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// This file is part of hpp-manipulation.
// hpp-manipulation is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation. If not, see <http://www.gnu.org/licenses/>.


#ifndef HPP_MANIPULATION_CORBA_GRAPH_IDL
# define HPP_MANIPULATION_CORBA_GRAPH_IDL

# include "hpp/corbaserver/manipulation/gcommon.idl"
# include <hpp/corbaserver/common.idl>

module hpp {
  module corbaserver {
    module manipulation {
      interface Graph {
        /// Initialize the graph of constraints.
        /// \note The composite hpp::manipulation::robot must be completely defined first.
        long createGraph(in string graphName)
          raises (Error);

        /// Create a subgraph of the constraint graph for one particular end-effector.
        long createSubGraph(in string subgraphName)
          raises (Error);

        /// Add a node to the graph.
        /// \param subGraphId is the ID of the subgraph to which the node should be added.
        /// \param nodeName the name of the new node.
        long createNode (in long subGraphId, in string nodeName)
          raises (Error);

        /// Add an edge between two nodes of the graph.
        /// \param nodeFromId, nodeToId the ID of the ends of the new edge.
        /// \param edgeName name of the new edge.
        /// \param weight weight of the edge.
        long createEdge (in long nodeFromId, in long nodeToId, in string edgeName, in long weight, in boolean isInNodeFrom)
          raises (Error);

        /// Set the numerical constraints of a component.
        /// \param graphComponentId ID of the component.
        /// \param constraintNames is an array of names of constraints in the ProblemSolver map.
        void setNumericalConstraints (in long graphComponentId, in Names_t constraintNames)
          raises (Error);

        /// Set the numerical constraints for path of a node.
        /// \param nodeId ID of the node.
        /// \param constraintNames is an array of names of constraints in the ProblemSolver map.
        void setNumericalConstraintsForPath (in long nodeId, in Names_t constraintNames)
          raises (Error);

        /// Set the LockedDof constraints of a component.
        /// \param graphComponentId ID of the component.
        /// \param constraintNames is an array of names of constraints in the ProblemSolver map.
        void setLockedDofConstraints (in long graphComponentId, in Names_t constraintNames)
          raises (Error);

        /// Activate statistic analysis for this sequence of edges.
        /// \param IDedges list of edges ID.
        void statOnConstraint (in IDseq IDedges)
          raises (Error);

        /// Get one node per subgraph corresponding to the state of the configuration.
        /// \param dofArray the configuration.
        /// \return a list of IDs corresponding to the nodes.
        void getNodes (in floatSeq dofArray, out IDseq nodeIDs)
          raises (Error);

        void display ()
          raises (Error);
      }; // interface Graph
    }; // module manipulation
  }; // module corbaserver
}; // module hpp

#endif // HPP_MANIPULATION_CORBA_GRAPH_IDL
