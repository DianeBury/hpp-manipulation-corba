// Copyright (c) 2014 CNRS
// Author: Florent Lamiraux
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_MANIPULATION_CORBA_ROBOT_IDL
# define HPP_MANIPULATION_CORBA_ROBOT_IDL

# include "hpp/corbaserver/manipulation/gcommon.idl"
# include <hpp/corbaserver/common.idl>


module hpp {
  module corbaserver {
    module manipulation {
      interface Problem
      {

        /// Create grasp constraint between robot gripper and object handle
	///
	/// \param graspName name of the constraint for storing in ProblemSolver
	///        map,
	/// \param gripperName name of the gripper used when it has been created
	/// \param handleName name of the handle in the form "object/handle"
	/// where object is the name of the object owning the handle and handle
	/// is the name of the handle in this object.
	void createGrasp (in string graspName, in string gripperName,
			  in string handleName)
	  raises (Error);

        /// Create pre-grasp constraint between robot gripper and object handle
	///
	/// \param graspName name of the constraint for storing in ProblemSolver
	///        map,
	/// \param gripperName name of the gripper used when it has been created
	/// \param handleName name of the handle in the form "object/handle"
	/// where object is the name of the object owning the handle and handle
	/// is the name of the handle in this object.
	void createPreGrasp (in string graspName, in string gripperName,
			  in string handleName)
	  raises (Error);

        /// Insert a new LockedJoint constraint with given value in the
        ///        hpp::manipulation::ProblemSolver map
        /// \param lockedJointName key of the constraint in the map
        /// \param jointName name of the joint
        /// \param value value of the joint configuration,
        void createLockedJoint (in string lockedJointName,
                                in string jointName,
                                in floatSeq value)
          raises (Error);

        Names_t getEnvironmentContactNames ()
          raises (Error);

        Names_t getRobotContactNames ()
          raises (Error);

	/// Create a placement constraint between a triangles of robot and env.
	///
	/// \param placementName Name of the numerical constraint,
	/// \param jointName Name of the joint holding the contact surface
	///        composed of triangles,
	/// \param triangleName Name of the list of triangles as stored in the
	///        Device instance,
	/// \param envContactName Name of the list of triangles as stored in
	///        ProblemSolver instance
	///
	/// A placement constraint specifies that surfaces delimited by
	/// one triangle of the robot and one triangle of the environment
	/// should have an intersection of positive area.
        void createPlacementConstraint (in string placementName,
            in string jointName, in string triangleName,
            in string envContactName)
          raises (Error);

        /// Apply constaints to a configuration
        ///
        /// \param idComp ID of a node or a configuration
        /// \param input input configuration,
        /// \retval output output configuration,
        /// \retval error norm of the residual error.
        boolean applyConstraints (in ID idComp, in floatSeq input, out floatSeq output,
            out double residualError)
          raises (Error);

        /// Apply constaints to a configuration
        ///
        /// \param IDedge ID of an edge
        /// \param qnear configuration to initiliaze the projector,
        /// \param input input configuration,
        /// \retval output output configuration,
        /// \retval error norm of the residual error.
        boolean applyConstraintsWithOffset (in ID IDedge, in floatSeq qnear, in floatSeq input, out floatSeq output,
            out double residualError)
          raises (Error);

      }; // interface Problem
    }; // module manipulation
  }; // module corbaserver
}; // module hpp

#endif // HPP_MANIPULATION_CORBA_ROBOT_IDL
