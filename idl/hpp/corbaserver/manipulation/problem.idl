// Copyright (c) 2014 CNRS
// Author: Florent Lamiraux
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_MANIPULATION_CORBA_ROBOT_IDL
# define HPP_MANIPULATION_CORBA_ROBOT_IDL

# include "hpp/corbaserver/manipulation/gcommon.idl"
# include <hpp/corbaserver/common.idl>


module hpp {
  module corbaserver {
    module manipulation {
      interface Problem
      {

        /// Create grasp constraint between robot gripper and object handle
	///
	/// \param graspName name of the constraint for storing in ProblemSolver
	///        map,
	/// \param gripperName name of the gripper used when it has been created
	/// \param handleName name of the handle in the form "object/handle"
	/// where object is the name of the object owning the handle and handle
	/// is the name of the handle in this object.
	void createGrasp (in string graspName, in string gripperName,
			  in string handleName)
	  raises (Error);

        /// Insert a new LockedDof constraint with given value in the
        ///        hpp::manipulation::ProblemSolver map
        /// \param lockedDofName key of the constraint in the map
        /// \param jointName name of the joint
        /// \param value value of the locked degree of freedom,
        /// \param rankInConfiguration rank of the locked dof in the joint
        ///        configuration vector (should be 0 for rotation and translation
        ///        joints)
        /// \param rankInVelocity rank of the locked dof in the joint
        ///        velocity vector (should be 0 for rotation and translation
        ///        joints)
        void createLockedDofConstraint (in string lockedDofName, in string jointName,
            in double value,
            in unsigned short rankInConfiguration,
            in unsigned short rankInVelocity)
          raises (Error);

        /// Make a LockedDof constraint parametric or non-parametric
        /// \param constraintName Name of the numerical constraint,
        /// \param value True is parametric
        ///
        /// Constraints should have been added in the ProblemSolver local map.
        void isLockedDofParametric (in string constraintName, in boolean parametric)
          raises (Error);

        void extend (in floatSeq q_near, in floatSeq q_rand, out floatSeq q_new)
          raises (Error);

        /// Apply constaints to a configuration
        ///
        /// constraints are stored in ProblemSolver object
        /// \param IDnodes list of node ID
        /// \param input input configuration,
        /// \retval output output configuration,
        /// \retval error norm of the residual error.
        boolean applyConstraints (in IDseq IDnodes, in floatSeq input, out floatSeq output,
            out double residualError)
          raises (Error);

      }; // interface Problem
    }; // module manipulation
  }; // module corbaserver
}; // module hpp

#endif // HPP_MANIPULATION_CORBA_ROBOT_IDL
