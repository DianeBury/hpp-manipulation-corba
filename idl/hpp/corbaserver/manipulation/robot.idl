// Copyright (c) 2014 CNRS
// Author: Florent Lamiraux
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba.  If not, see
// <http://www.gnu.org/licenses/>.

#ifndef HPP_MANIPULATION_CORBA_ROBOT_IDL
# define HPP_MANIPULATION_CORBA_ROBOT_IDL

# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  module manipulation {
  interface Robot
  {
    ///  Load robot model and store in local map
    ///
    /// \param robotName key of the robot in ProblemSolver object map
    ///        (see hpp::manipulation::ProblemSolver::addRobot)
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadRobotModel (in string robotName, in string rootJointType,
			 in string packageName, in string modelName,
			 in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    ///  Load humanoid robot model and store in local map
    ///
    /// \param robotName key of the robot in ProblemSolver object map
    ///        (see hpp::manipulation::ProblemSolver::addRobot)
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadHumanoidModel (in string robotName, in string rootJointType,
			    in string packageName, in string modelName,
			    in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    ///  Load object model and store in local map
    ///
    /// \param robotName key of the object in ProblemSolver object map
    ///        (see hpp::manipulation::ProblemSolver::addRobot)
    /// \param rootJointType type of root joint among "anchor", "freeflyer",
    /// "planar",
    /// \param packageName Name of the ROS package containing the model,
    /// \param modelName Name of the package containing the model
    /// \param urdfSuffix suffix for urdf file,
    ///
    /// The ros url are built as follows:
    /// "package://${packageName}/urdf/${modelName}${urdfSuffix}.urdf"
    /// "package://${packageName}/srdf/${modelName}${srdfSuffix}.srdf"
    ///
    void loadObjectModel (in string objectName, in string rootJointType,
			  in string packageName, in string modelName,
			  in string urdfSuffix, in string srdfSuffix)
      raises (Error);

    /// Build a composite robot from a set of robots and objects
    ///
    /// \param robotName Name of the composite robot,
    /// \param robotNames list of names of the robots and objects.
    void buildCompositeRobot (in string robotName, in Names_t robotNames)
      raises (Error);

    /// Add Gripper to a robot
    ///
    /// \param robotName name of the robot owning the gripper,
    /// \param linkName name of the link (hpp::model::Body) holding the gripper,
    /// \param gripperName name of the gripper,
    /// \param handlePositioninJoint position of the handle in the joint frame.
    /// \param jointNames list of names of joints inside the gripper.
    /// \param gripperOpen list of joint values, in the same order as jointNames,
    ///        when the gripper is open.
    /// \param gripperClosed list of joint values, in the same order as jointNames,
    ///        when the gripper is closed.
    ///
    /// \note To disable the opening parameter, jointNames, gripperOpen and
    ///       gripperClosed must be empty lists. These three lists must have
    ///       the same length.
    void addGripper (in string robotName, in string linkName,
		     in string gripperName, 
                     in Transform handlePositioninJoint,
                     in Names_t bodyInCollisionNames,
                     in Names_t jointNames,
                     in floatSeq gripperOpen,
                     in floatSeq gripperClosed)
      raises (Error);

    void setGripperParam (in string gripperName, in float param)
      raises (Error);

    /// Add Handle to an object
    ///
    /// \param objectName name of the object holding the handle,
    /// \param linkName name of the link (hpp::model::Body) holding the handle,
    /// \param handleName name of the handle,
    /// \param localPosition position of the handle in the joint frame.
    void addHandle (in string objectName, in string linkName,
		    in string handleName, in Transform localPosition)
      raises (Error);

    /// Add axial handle to an object
    ///
    /// \param objectName name of the object holding the handle,
    /// \param linkName name of the link (hpp::model::Body) holding the handle,
    /// \param handleName name of the handle,
    /// \param localPosition position of the handle in the joint frame,
    ///        rotation around x-axis is not constrained.
    void addAxialHandle (in string objectName, in string linkName,
			 in string handleName, in Transform localPosition)
      raises (Error);

    Names_t getDeviceNames ()
      raises (Error);

    Names_t getDeviceJointNames (in string inDeviceName)
      raises (Error);
    
    string getRootBody(in string inRootJointType, in string inDeviceName)
      raises (Error);
  }; // interface Robot
  }; // module manipulation
  }; // module corbaserver
}; // module hpp

#endif // HPP_MANIPULATION_CORBA_ROBOT_IDL
